{"version":3,"sources":["../node_modules/wrappy/wrappy.js","../node_modules/once/once.js","../src/constants.ts","../src/inputs/getVitestJsonPath.ts","../src/inputs/parseVitestJsonFinalReport.ts","../src/report/generateBadges.ts","../node_modules/deprecation/dist-web/index.js","../node_modules/@octokit/request-error/dist-src/index.js","../src/inputs/getGithubToken.ts","../src/utils/getOctokit.ts","../src/inputs/getPullChanges.ts","../src/utils/readJsonFile.ts","../src/utils/isMonoRepo.ts","../src/inputs/getWorkspacePackages.ts","../src/inputs/getChangedPackages.ts","../src/inputs/getViteConfigPath.ts","../src/inputs/parseCoverageThresholds.ts","../src/inputs/getVitestThresholds.ts","../src/report/generateFileUrl.ts","../src/report/getUncoveredLinesFromStatements.ts","../src/report/generateFileCoverageHtml.ts","../src/report/generateHeadline.ts","../src/report/generateSummaryTableHtml.ts","../src/report/generateCoverageSummary.ts","../src/utils/updateReadmeEntry.ts","../src/utils/writeSummaryToReadMe.ts","../src/main.mts"],"names":["cb","once","core2","resolve","core3","core4","getOctokit","github","github2","core6","fs","core7","stripIndent","readFile","core8","oneLine","summary","core9","existsSync","github4","join","core10"],"mappings":"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","file":"main.mjs","sourcesContent":["// Returns a wrapper function that returns a wrapped callback\n// The wrapper function should do some stuff, and return a\n// presumably different callback function.\n// This makes sure that own properties are retained, so that\n// decorations and such are not lost along the way.\nmodule.exports = wrappy\nfunction wrappy (fn, cb) {\n  if (fn && cb) return wrappy(fn)(cb)\n\n  if (typeof fn !== 'function')\n    throw new TypeError('need wrapper function')\n\n  Object.keys(fn).forEach(function (k) {\n    wrapper[k] = fn[k]\n  })\n\n  return wrapper\n\n  function wrapper() {\n    var args = new Array(arguments.length)\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i]\n    }\n    var ret = fn.apply(this, args)\n    var cb = args[args.length-1]\n    if (typeof ret === 'function' && ret !== cb) {\n      Object.keys(cb).forEach(function (k) {\n        ret[k] = cb[k]\n      })\n    }\n    return ret\n  }\n}\n","var wrappy = require('wrappy')\nmodule.exports = wrappy(once)\nmodule.exports.strict = wrappy(onceStrict)\n\nonce.proto = once(function () {\n  Object.defineProperty(Function.prototype, 'once', {\n    value: function () {\n      return once(this)\n    },\n    configurable: true\n  })\n\n  Object.defineProperty(Function.prototype, 'onceStrict', {\n    value: function () {\n      return onceStrict(this)\n    },\n    configurable: true\n  })\n})\n\nfunction once (fn) {\n  var f = function () {\n    if (f.called) return f.value\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  f.called = false\n  return f\n}\n\nfunction onceStrict (fn) {\n  var f = function () {\n    if (f.called)\n      throw new Error(f.onceError)\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  var name = fn.name || 'Function wrapped with `once`'\n  f.onceError = name + \" shouldn't be called more than once\"\n  f.called = false\n  return f\n}\n","export const icons = {\n  red: '🔴',\n  green: '🟢',\n  blue: '🔵',\n  increase: '⬆️',\n  decrease: '⬇️',\n  equal: '🟰',\n  target: '🎯',\n};\n\nexport const COVERAGE_README_MARKER = `<!-- hyperse-vitest-coverage-reporter-marker-readme -->`;\n\nexport const defaultJsonSummaryPath = 'coverage/coverage-summary.json';\nexport const defaultJsonFinalPath = 'coverage/coverage-final.json';\n","import { resolve } from 'node:path';\nimport * as core from '@actions/core';\nimport { defaultJsonFinalPath, defaultJsonSummaryPath } from '../constants';\n\nexport const getVitestJsonPath = (projectCwd: string) => {\n  const jsonSummaryPath = resolve(\n    projectCwd,\n    core.getInput('json-summary-path') || defaultJsonSummaryPath\n  );\n  const jsonFinalPath = resolve(\n    projectCwd,\n    core.getInput('json-final-path') || defaultJsonFinalPath\n  );\n\n  const jsonSummaryCompareInput = core.getInput('json-summary-compare-path');\n  let jsonSummaryComparePath: string | null = null;\n  if (jsonSummaryCompareInput) {\n    jsonSummaryComparePath = resolve(projectCwd, jsonSummaryCompareInput);\n  }\n\n  return {\n    jsonFinalPath,\n    jsonSummaryPath,\n    jsonSummaryComparePath,\n  };\n};\n","import { stripIndent } from 'common-tags';\nimport { readFile } from 'node:fs/promises';\nimport { resolve } from 'node:path';\nimport * as core from '@actions/core';\nimport type { JsonFinal } from '../types/JsonFinal.js';\nimport type { JsonSummary } from '../types/JsonSummary.js';\n\nconst parseVitestCoverageReport = async <type extends JsonSummary | JsonFinal>(\n  jsonPath: string\n): Promise<type> => {\n  const resolvedJsonSummaryPath = resolve(process.cwd(), jsonPath);\n  const jsonSummaryRaw = await readFile(resolvedJsonSummaryPath);\n  return JSON.parse(jsonSummaryRaw.toString()) as type;\n};\n\nexport const parseVitestJsonSummaryReport = async (\n  jsonSummaryPath: string\n): Promise<JsonSummary> => {\n  try {\n    return await parseVitestCoverageReport<JsonSummary>(jsonSummaryPath);\n  } catch (err: unknown) {\n    const stack = err instanceof Error ? err.stack : '';\n    core.setFailed(stripIndent`\n        Failed to parse the json-summary at path \"${jsonSummaryPath}.\"\n        Make sure to run vitest before this action and to include the \"json-summary\" reporter.\n\n        Original Error:\n        ${stack}\n    `);\n\n    // Rethrow to abort the entire workflow\n    throw err;\n  }\n};\n\nexport const parseVitestJsonFinalReport = async (\n  jsonFinalPath: string\n): Promise<JsonFinal> => {\n  try {\n    return await parseVitestCoverageReport<JsonFinal>(jsonFinalPath);\n  } catch (err: unknown) {\n    const stack = err instanceof Error ? err.stack : '';\n    core.warning(stripIndent`\n      Failed to parse JSON Final at path \"${jsonFinalPath}\".\n      Line coverage will be empty. To include it, make sure to include the \"json\" reporter in your vitest execution.\n\n      Original Error:\n      ${stack}\n    `);\n    return {};\n  }\n};\n","import { createWriteStream, existsSync, mkdirSync } from 'node:fs';\nimport https from 'node:https';\nimport { resolve } from 'node:path';\nimport { CoverageReport } from '../types/JsonSummary.js';\n\n/**\n * Generate a shields.io URL for a badge.\n * Change the color of the badge based on the percentage.\n *\n * @param summaryData The coverage summary report data.\n * @param summaryKey  The summary key to display on the badge.\n * @returns The shields.io URL.\n */\nconst generateUrl = (\n  summaryData: CoverageReport,\n  summaryKey: keyof CoverageReport\n) => {\n  const percentage = summaryData[summaryKey].pct;\n  let color = 'brightgreen';\n  if (percentage < 70) {\n    color = 'red';\n  } else if (percentage < 80) {\n    color = 'yellow';\n  } else if (percentage < 90) {\n    color = 'orange';\n  }\n  return `https://img.shields.io/badge/coverage%3A${summaryKey}-${percentage}%25-${color}.svg`;\n};\n\n/**\n * Download a badge from shields.io.\n * @param url The shields.io URL.\n * @param filename The filename to save the badge to.\n * @return Promise<void>\n */\nconst downloadBadge = (url: string, filename: string) => {\n  return new Promise<void>((resolve, reject) => {\n    https.get(url, (res) => {\n      if (res.statusCode !== 200) {\n        const newError = new Error(\n          `Error downloading badge: ${res.statusMessage}`\n        );\n        console.error(newError);\n        return reject(newError);\n      }\n\n      const file = createWriteStream(filename);\n      res.pipe(file);\n      file.on('finish', () => {\n        file.close();\n        resolve();\n      });\n      file.on('error', (err) => {\n        console.error(`Error saving badge: ${err}`);\n        reject(err);\n      });\n    });\n  });\n};\n\n/**\n * Generate badges for code coverage.\n */\nexport type GenerateBadgesOptions = {\n  /**\n   * The path to the coverage json file.\n   */\n  totalCoverageReport: CoverageReport;\n  /**\n   * The directory to save the badges to.\n   */\n  badgesSavedTo: string;\n};\n\n/**\n * Generate badges for code coverage.\n */\nexport const generateBadges = async (options: GenerateBadgesOptions) => {\n  const { badgesSavedTo, totalCoverageReport } = options;\n\n  // Construct the shields.io URL for each badge.\n  const statementsBadgeUrl = generateUrl(totalCoverageReport, 'statements');\n  const branchesBadgeUrl = generateUrl(totalCoverageReport, 'branches');\n  const functionsBadgeUrl = generateUrl(totalCoverageReport, 'functions');\n  const linesBadgeUrl = generateUrl(totalCoverageReport, 'lines');\n\n  // Create the badges directory if it does not exist.\n  if (!existsSync(badgesSavedTo)) {\n    mkdirSync(badgesSavedTo);\n  }\n\n  // Download each badge and save it to the badges directory.\n  await downloadBadge(\n    statementsBadgeUrl,\n    resolve(badgesSavedTo, 'statements.svg')\n  );\n  await downloadBadge(\n    functionsBadgeUrl,\n    resolve(badgesSavedTo, 'functions.svg')\n  );\n  await downloadBadge(linesBadgeUrl, resolve(badgesSavedTo, 'lines.svg'));\n  await downloadBadge(branchesBadgeUrl, resolve(badgesSavedTo, 'branches.svg'));\n\n  console.log('Code coverage badges created successfully.');\n};\n","class Deprecation extends Error {\n  constructor(message) {\n    super(message); // Maintains proper stack trace (only available on V8)\n\n    /* istanbul ignore next */\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    this.name = 'Deprecation';\n  }\n\n}\n\nexport { Deprecation };\n","import { Deprecation } from \"deprecation\";\nimport once from \"once\";\nconst logOnceCode = once((deprecation) => console.warn(deprecation));\nconst logOnceHeaders = once((deprecation) => console.warn(deprecation));\nclass RequestError extends Error {\n  constructor(message, statusCode, options) {\n    super(message);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n    this.name = \"HttpError\";\n    this.status = statusCode;\n    let headers;\n    if (\"headers\" in options && typeof options.headers !== \"undefined\") {\n      headers = options.headers;\n    }\n    if (\"response\" in options) {\n      this.response = options.response;\n      headers = options.response.headers;\n    }\n    const requestCopy = Object.assign({}, options.request);\n    if (options.request.headers.authorization) {\n      requestCopy.headers = Object.assign({}, options.request.headers, {\n        authorization: options.request.headers.authorization.replace(\n          / .*$/,\n          \" [REDACTED]\"\n        )\n      });\n    }\n    requestCopy.url = requestCopy.url.replace(/\\bclient_secret=\\w+/g, \"client_secret=[REDACTED]\").replace(/\\baccess_token=\\w+/g, \"access_token=[REDACTED]\");\n    this.request = requestCopy;\n    Object.defineProperty(this, \"code\", {\n      get() {\n        logOnceCode(\n          new Deprecation(\n            \"[@octokit/request-error] `error.code` is deprecated, use `error.status`.\"\n          )\n        );\n        return statusCode;\n      }\n    });\n    Object.defineProperty(this, \"headers\", {\n      get() {\n        logOnceHeaders(\n          new Deprecation(\n            \"[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.\"\n          )\n        );\n        return headers || {};\n      }\n    });\n  }\n}\nexport {\n  RequestError\n};\n","import * as core from '@actions/core';\n\n/**\n * Get the GitHub token from action input `github-token`\n * @returns\n */\nexport const getGithubToken = () => {\n  const gitHubToken = core.getInput('github-token').trim();\n  return gitHubToken;\n};\n","import * as github from '@actions/github';\nimport { getGithubToken } from '../inputs/getGithubToken.js';\n\nexport type Octokit = ReturnType<typeof github.getOctokit>;\n\n/**\n * Get the Octokit instance\n * @returns The Octokit instance\n */\nexport const getOctokit = () => {\n  const gitHubToken = getGithubToken();\n  const octokit: Octokit = github.getOctokit(gitHubToken);\n  return octokit;\n};\n","import * as core from '@actions/core';\nimport * as github from '@actions/github';\nimport { RequestError } from '@octokit/request-error';\nimport { getOctokit } from '../utils/getOctokit.js';\nimport { FileCoverageMode } from './getCoverageModeFrom.js';\n\nexport async function getPullChanges(\n  fileCoverageMode: FileCoverageMode\n): Promise<string[]> {\n  // Skip Changes collection if we don't need it\n  if (fileCoverageMode === FileCoverageMode.None) {\n    return [];\n  }\n\n  // Skip Changes collection if we can't do it\n  if (!github.context.payload?.pull_request) {\n    return [];\n  }\n\n  const prNumber = github.context.payload.pull_request.number;\n  try {\n    const paths: string[] = [];\n    const octokit = getOctokit();\n\n    core.startGroup(\n      `Fetching list of changed files for PR#${prNumber} from Github API`\n    );\n\n    const iterator = octokit.paginate.iterator(octokit.rest.pulls.listFiles, {\n      owner: github.context.repo.owner,\n      repo: github.context.repo.repo,\n      pull_number: prNumber,\n      per_page: 100,\n    });\n\n    for await (const response of iterator) {\n      core.info(`Received ${response.data.length} items`);\n\n      for (const file of response.data) {\n        core.debug(`[${file.status}] ${file.filename}`);\n        if (['added', 'modified'].includes(file.status)) {\n          paths.push(file.filename);\n        }\n      }\n    }\n    return paths;\n  } catch (error) {\n    if (\n      error instanceof RequestError &&\n      (error.status === 404 || error.status === 403)\n    ) {\n      core.warning(\n        `Couldn't fetch changes of PR due to error:\\n[${error.name}]\\n${error.message}`\n      );\n      return [];\n    }\n\n    throw error;\n  } finally {\n    core.endGroup();\n  }\n}\n","import { readFileSync } from 'node:fs';\nimport { join } from 'node:path';\n\nexport type Manifest = Record<string, unknown> & {\n  name: string;\n  version: string;\n  packages: any;\n  workspaces: any;\n};\n\nexport const readJsonFile = (cwd: string) => {\n  const manifest = JSON.parse(\n    readFileSync(join(cwd, 'package.json'), 'utf-8')\n  ) as Manifest;\n  return manifest;\n};\n","import { Manifest, readJsonFile } from './readJsonFile.js';\n\nexport const isMonoRepo = (cwd: string = process.cwd()): boolean => {\n  const manifest = readJsonFile(cwd);\n  const workspaces = extractWorkspaces(manifest);\n  return !!workspaces;\n};\n\nfunction extractWorkspaces(manifest: Manifest) {\n  const workspaces = (manifest || {}).workspaces;\n  return (\n    (workspaces && workspaces.packages) ||\n    (Array.isArray(workspaces) ? workspaces : null)\n  );\n}\n","import { getPackages } from '@manypkg/get-packages';\nimport { isMonoRepo } from '../utils/isMonoRepo.js';\nimport { readJsonFile } from '../utils/readJsonFile.js';\n\n/**\n * Get the workspace packages\n * @param cwd The current working directory, repo root\n * @returns\n */\nexport async function getWorkspacePackages(\n  cwd: string\n): Promise<\n  Map<string, { name: string; relativeDir: string; version: string }>\n> {\n  if (!isMonoRepo(cwd)) {\n    try {\n      const packageJson = readJsonFile(cwd);\n      return new Map([\n        [\n          cwd,\n          {\n            name: packageJson.name,\n            version: packageJson.version,\n            // always keep relativeDir as empty string for non-monorepo\n            relativeDir: '',\n          },\n        ],\n      ]);\n    } catch {\n      return new Map();\n    }\n  }\n\n  const { packages } = await getPackages(cwd);\n  const sortedPackages: Array<\n    [string, { name: string; relativeDir: string; version: string }]\n  > = packages.map((x) => [\n    x.dir,\n    {\n      name: x.packageJson.name,\n      version: x.packageJson.version,\n      relativeDir: x.relativeDir,\n    },\n  ]);\n  // sort by package name\n  sortedPackages.sort((a, b) => {\n    if (a[1].name < b[1].name) {\n      return -1;\n    }\n    if (a[1].name > b[1].name) {\n      return 1;\n    }\n    return 0;\n  });\n\n  return new Map(sortedPackages);\n}\n","import * as core from '@actions/core';\nimport { Package } from '@manypkg/get-packages';\nimport { FileCoverageMode } from './getCoverageModeFrom';\nimport { getPullChanges } from './getPullChanges';\nimport { getWorkspacePackages } from './getWorkspacePackages';\n\nexport async function getChangedPackages(\n  repoCwd: string,\n  includeAllProjects = false\n) {\n  const workspacePackages = await getWorkspacePackages(repoCwd);\n  const changedPackages = new Set<Package>();\n  // if all project don't need to check changes\n  const allChangedFiles = includeAllProjects\n    ? []\n    : await getPullChanges(FileCoverageMode.All);\n  core.debug(`allChangedFiles: ${JSON.stringify(allChangedFiles, null, 2)}`);\n  for (const [dir, { name, relativeDir, version }] of workspacePackages) {\n    const includeThisProject =\n      includeAllProjects ||\n      allChangedFiles.find((s) => !!~s.indexOf(relativeDir));\n\n    core.info(`package(${name}: ${relativeDir}) is: ${includeThisProject}`);\n    if (includeThisProject) {\n      changedPackages.add({\n        dir,\n        relativeDir,\n        packageJson: {\n          name,\n          version,\n        },\n      });\n    }\n  }\n\n  return [...changedPackages];\n}\n","import { stripIndent } from 'common-tags';\nimport { constants, promises as fs } from 'node:fs';\nimport { resolve } from 'node:path';\nimport * as core from '@actions/core';\n\nconst testFilePath = async (workingDirectory: string, filePath: string) => {\n  const resolvedPath = resolve(workingDirectory, filePath);\n  await fs.access(resolvedPath, constants.R_OK);\n  return resolvedPath;\n};\n\nconst defaultPaths = [\n  'vitest.config.ts',\n  'vitest.config.mts',\n  'vitest.config.cts',\n  'vitest.config.js',\n  'vitest.config.mjs',\n  'vitest.config.cjs',\n  'vite.config.ts',\n  'vite.config.mts',\n  'vite.config.cts',\n  'vite.config.js',\n  'vite.config.mjs',\n  'vite.config.cjs',\n  'vitest.workspace.ts',\n  'vitest.workspace.mts',\n  'vitest.workspace.cts',\n  'vitest.workspace.js',\n  'vitest.workspace.mjs',\n  'vitest.workspace.cjs',\n];\n\n/**\n * Get the path to the vite config file\n * @param workingDirectory The working directory, repo root\n * @param configPath The vite config path, optional, if not provided will try to find the vite config file in the default paths\n * @returns\n */\nexport const getViteConfigPath = async (\n  workingDirectory: string,\n  configPath: string = ''\n) => {\n  try {\n    if (configPath === '') {\n      return await Promise.any(\n        defaultPaths.map((filePath) => testFilePath(workingDirectory, filePath))\n      );\n    }\n\n    return await testFilePath(workingDirectory, configPath);\n  } catch {\n    const searchPath = configPath\n      ? resolve(workingDirectory, configPath)\n      : `any default location in \"${workingDirectory}\"`;\n\n    core.warning(stripIndent`\n          Failed to read vite config file at ${searchPath}.\n          Make sure you provide the vite-config-path option if you're using a non-default location or name of your config file.\n\n          Will not include thresholds in the final report.\n      `);\n    return null;\n  }\n};\n","import { readFile } from 'node:fs/promises';\nimport { resolve } from 'node:path';\nimport * as core from '@actions/core';\nimport type { Thresholds } from '../types/Threshold.js';\n\nconst regex100 = /100\"?\\s*:\\s*true/;\nconst regexStatements = /statements\\s*:\\s*(\\d+)/;\nconst regexLines = /lines:\\s*(\\d+)/;\nconst regexBranches = /branches\\s*:\\s*(\\d+)/;\nconst regexFunctions = /functions\\s*:\\s*(\\d+)/;\n\n/**\n * Parse the coverage thresholds from the vite config file, supports all vite config file formats\n * @param vitestConfigPath The path to the vite config file\n * @returns\n */\nexport const parseCoverageThresholds = async (\n  vitestConfigPath: string\n): Promise<Thresholds> => {\n  try {\n    const resolvedViteConfigPath = resolve(process.cwd(), vitestConfigPath);\n    const rawContent = await readFile(resolvedViteConfigPath, 'utf8');\n\n    const has100Value = rawContent.match(regex100);\n\n    if (has100Value) {\n      return {\n        lines: 100,\n        branches: 100,\n        functions: 100,\n        statements: 100,\n      };\n    }\n\n    const lines = rawContent.match(regexLines);\n    const branches = rawContent.match(regexBranches);\n    const functions = rawContent.match(regexFunctions);\n    const statements = rawContent.match(regexStatements);\n\n    return {\n      lines: lines ? Number.parseInt(lines[1]) : undefined,\n      branches: branches ? Number.parseInt(branches[1]) : undefined,\n      functions: functions ? Number.parseInt(functions[1]) : undefined,\n      statements: statements ? Number.parseInt(statements[1]) : undefined,\n    };\n  } catch (err: unknown) {\n    core.warning(\n      `Could not read vite config file for tresholds due to an error:\\n ${err}`\n    );\n    return {};\n  }\n};\n","import { Thresholds } from '../types/Threshold.js';\nimport { getViteConfigPath } from './getViteConfigPath.js';\nimport { parseCoverageThresholds } from './parseCoverageThresholds.js';\n\nexport const getVitestThresholds = async (\n  projectCwd: string,\n  viteConfigPath: string = ''\n): Promise<Thresholds> => {\n  // ViteConfig is optional, as it is only required for thresholds. If no vite config is provided, we will not include thresholds in the final report.\n  const finalViteConfigPath = await getViteConfigPath(\n    projectCwd,\n    viteConfigPath\n  );\n\n  const thresholds = finalViteConfigPath\n    ? await parseCoverageThresholds(finalViteConfigPath)\n    : {};\n  return thresholds;\n};\n","import * as github from '@actions/github';\n\nexport const generateBlobFileUrl = (relativeFilePath: string) => {\n  const sha = github.context.payload.pull_request\n    ? github.context.payload.pull_request.head.sha\n    : github.context.sha;\n\n  return [\n    github.context.serverUrl,\n    github.context.repo.owner,\n    github.context.repo.repo,\n    'blob',\n    sha,\n    relativeFilePath,\n  ].join('/');\n};\n","import type { StatementCoverageReport } from '../types/JsonFinal.js';\n\nexport type LineRange = {\n  start: number;\n  end: number;\n};\n\nexport const getUncoveredLinesFromStatements = ({\n  s,\n  statementMap,\n}: StatementCoverageReport): LineRange[] => {\n  const keys = Object.keys(statementMap);\n\n  const uncoveredLineRanges = keys.reduce<LineRange[]>((acc, key) => {\n    if (s[key] === 0) {\n      const lastRange = acc.at(-1);\n\n      if (lastRange && lastRange.end === statementMap[key].start.line - 1) {\n        lastRange.end = statementMap[key].end.line;\n        return acc;\n      }\n\n      acc.push({\n        start: statementMap[key].start.line,\n        end: statementMap[key].end.line,\n      });\n    }\n    return acc;\n  }, []);\n\n  return uncoveredLineRanges;\n};\n","import { oneLine } from 'common-tags';\nimport * as path from 'node:path';\nimport { FileCoverageMode } from '../inputs/getCoverageModeFrom.js';\nimport type { JsonFinal } from '../types/JsonFinal.js';\nimport type { JsonSummary } from '../types/JsonSummary.js';\nimport { generateBlobFileUrl } from './generateFileUrl.js';\nimport {\n  getUncoveredLinesFromStatements,\n  type LineRange,\n} from './getUncoveredLinesFromStatements.js';\n\ntype FileCoverageInputs = {\n  jsonSummary: JsonSummary;\n  jsonFinal: JsonFinal;\n  fileCoverageMode: FileCoverageMode;\n  pullChanges: string[];\n};\n\nconst workspacePath = process.cwd();\n\nexport const generateFileCoverageHtml = ({\n  jsonSummary,\n  jsonFinal,\n  fileCoverageMode,\n  pullChanges,\n}: FileCoverageInputs) => {\n  const filePaths = Object.keys(jsonSummary).filter((key) => key !== 'total');\n\n  const formatFileLine = (filePath: string) => {\n    const coverageSummary = jsonSummary[filePath];\n    const lineCoverage = jsonFinal[filePath];\n\n    // LineCoverage might be empty if coverage-final.json was not provided.\n    const uncoveredLines = lineCoverage\n      ? getUncoveredLinesFromStatements(jsonFinal[filePath])\n      : [];\n    const relativeFilePath = path.relative(workspacePath, filePath);\n    const url = generateBlobFileUrl(relativeFilePath);\n\n    return `\n      <tr>\n        <td align=\"left\"><a href=\"${url}\">${relativeFilePath}</a></td>\n        <td align=\"right\">${coverageSummary.statements.pct}%</td>\n        <td align=\"right\">${coverageSummary.branches.pct}%</td>\n        <td align=\"right\">${coverageSummary.functions.pct}%</td>\n        <td align=\"right\">${coverageSummary.lines.pct}%</td>\n        <td align=\"left\">${createRangeURLs(uncoveredLines, url)}</td>\n      </tr>`;\n  };\n\n  let reportData = '';\n\n  const [changedFiles, unchangedFiles] = splitFilesByChangeStatus(\n    filePaths,\n    pullChanges\n  );\n\n  if (\n    fileCoverageMode === FileCoverageMode.Changes &&\n    changedFiles.length === 0\n  ) {\n    return 'No changed files found.';\n  }\n\n  if (changedFiles.length > 0) {\n    reportData += `\n\t\t\t${formatGroupLine('Changed Files')} \n\t\t\t${changedFiles.map(formatFileLine).join('')}\n\t\t`;\n  }\n\n  if (fileCoverageMode === FileCoverageMode.All && unchangedFiles.length > 0) {\n    reportData += `\n\t\t\t${formatGroupLine('Unchanged Files')}\n\t\t\t${unchangedFiles.map(formatFileLine).join('')}\n\t\t`;\n  }\n\n  return oneLine`\n    <table>\n      <thead>\n        <tr>\n         <th align=\"left\">File</th>\n         <th align=\"right\">Stmts</th>\n         <th align=\"right\">% Branch</th>\n         <th align=\"right\">% Funcs</th>\n         <th align=\"right\">% Lines</th>\n         <th align=\"left\">Uncovered Lines</th>\n        </tr>\n      </thead>\n      <tbody>\n      ${reportData}\n      </tbody>\n    </table>\n  `;\n};\n\nfunction formatGroupLine(caption: string): string {\n  return `\n\t\t<tr>\n\t\t\t<td align=\"left\" colspan=\"6\"><b>${caption}</b></td>\n\t\t</tr>\n\t`;\n}\n\nfunction createRangeURLs(uncoveredLines: LineRange[], url: string): string {\n  return uncoveredLines\n    .map((range) => {\n      let linkText = `${range.start}`;\n      let urlHash = `#L${range.start}`;\n\n      if (range.start !== range.end) {\n        linkText += `-${range.end}`;\n        urlHash += `-L${range.end}`;\n      }\n\n      return `<a href=\"${url}${urlHash}\" class=\"text-red\">${linkText}</a>`;\n    })\n    .join(', ');\n}\n\nfunction splitFilesByChangeStatus(\n  filePaths: string[],\n  pullChanges: string[]\n): [string[], string[]] {\n  return filePaths.reduce(\n    ([changedFiles, unchangedFiles], filePath) => {\n      // Pull Changes has filePaths relative to the git repository, whereas the jsonSummary has filePaths relative to the workspace.\n      // So we have to convert the filePaths to be relative to the workspace.\n      const comparePath = path.relative(workspacePath, filePath);\n      if (pullChanges.includes(comparePath)) {\n        changedFiles.push(filePath);\n      } else {\n        unchangedFiles.push(filePath);\n      }\n      return [changedFiles, unchangedFiles];\n    },\n    [[], []] as [string[], string[]]\n  );\n}\n","type HeadlineArgs = {\n  name?: string;\n  relativeDir?: string;\n};\n\nexport function generateHeadline(options: HeadlineArgs) {\n  const relativeDir = options.relativeDir;\n\n  if (options.name && relativeDir) {\n    return `Coverage Report for ${options.name} (${relativeDir})`;\n  }\n\n  if (options.name) {\n    return `Coverage Report for ${options.name}`;\n  }\n\n  if (relativeDir) {\n    return `Coverage Report for ${relativeDir}`;\n  }\n\n  return 'Coverage Report';\n}\n","import { oneLine } from 'common-tags';\nimport { icons } from '../constants.js';\nimport type { CoverageReport, ReportNumbers } from '../types/JsonSummary.js';\nimport type { Thresholds } from '../types/Threshold.js';\n\nexport function generateSummaryTableHtml(\n  jsonReport: CoverageReport,\n  thresholds: Thresholds = {},\n  jsonCompareReport: CoverageReport | undefined = undefined\n): string {\n  return oneLine`\n\t\t<table>\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t <th align=\"center\">Status</th>\n\t\t\t\t <th align=\"left\">Category</th>\n\t\t\t\t <th align=\"right\">Percentage</th>\n\t\t\t\t <th align=\"right\">Covered / Total</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t${generateTableRow({ reportNumbers: jsonReport.lines, category: 'Lines', threshold: thresholds.lines, reportCompareNumbers: jsonCompareReport?.lines })}\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t${generateTableRow({ reportNumbers: jsonReport.statements, category: 'Statements', threshold: thresholds.statements, reportCompareNumbers: jsonCompareReport?.statements })}\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t${generateTableRow({ reportNumbers: jsonReport.functions, category: 'Functions', threshold: thresholds.functions, reportCompareNumbers: jsonCompareReport?.functions })}\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t${generateTableRow({ reportNumbers: jsonReport.branches, category: 'Branches', threshold: thresholds.branches, reportCompareNumbers: jsonCompareReport?.branches })}\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t`;\n}\n\nfunction generateTableRow({\n  reportNumbers,\n  category,\n  threshold,\n  reportCompareNumbers,\n}: {\n  reportNumbers: ReportNumbers;\n  category: string;\n  threshold?: number;\n  reportCompareNumbers?: ReportNumbers;\n}): string {\n  let status = icons.blue;\n  let percent = `${reportNumbers.pct}%`;\n\n  if (threshold) {\n    percent = `${percent} (${icons.target} ${threshold}%)`;\n    status = reportNumbers.pct >= threshold ? icons.green : icons.red;\n  }\n\n  if (reportCompareNumbers) {\n    const percentDiff = reportNumbers.pct - reportCompareNumbers.pct;\n    const compareString = getCompareString(percentDiff);\n    percent = `${percent}<br/>${compareString}`;\n  }\n\n  return `\n    <td align=\"center\">${status}</td>\n    <td align=\"left\">${category}</td>\n\t\t<td align=\"right\">${percent}</td>\n    <td align=\"right\">${reportNumbers.covered} / ${reportNumbers.total}</td>\n  `;\n}\n\nfunction getCompareString(percentDiff: number): string {\n  if (percentDiff === 0) {\n    return `${icons.equal} <em>±0%</em>`;\n  }\n\n  if (percentDiff > 0) {\n    return `${icons.increase} <em>+${percentDiff.toFixed(2)}%</em>`;\n  }\n\n  // The - char is already included in a negative number\n  return `${icons.decrease} <em>${percentDiff.toFixed(2)}%</em>`;\n}\n","import { existsSync } from 'node:fs';\nimport * as core from '@actions/core';\nimport * as github from '@actions/github';\nimport { getChangedPackages } from '../inputs/getChangedPackages.js';\nimport { FileCoverageMode } from '../inputs/getCoverageModeFrom.js';\nimport { getPullChanges } from '../inputs/getPullChanges.js';\nimport { getVitestJsonPath } from '../inputs/getVitestJsonPath.js';\nimport { getVitestThresholds } from '../inputs/getVitestThresholds.js';\nimport {\n  parseVitestJsonFinalReport,\n  parseVitestJsonSummaryReport,\n} from '../inputs/parseVitestJsonFinalReport.js';\nimport type { JsonSummary } from '../types/JsonSummary.js';\nimport { generateFileCoverageHtml } from './generateFileCoverageHtml.js';\nimport { generateHeadline } from './generateHeadline.js';\nimport { generateSummaryTableHtml } from './generateSummaryTableHtml.js';\n\ntype GenerateCoverageSummaryOptions = {\n  name: string;\n  repoCwd: string;\n  hideHeadline?: boolean;\n  fileCoverageMode: FileCoverageMode;\n  includeAllProjects: boolean;\n};\n\nexport const generateCoverageSummary = async (\n  options: GenerateCoverageSummaryOptions\n): Promise<typeof core.summary> => {\n  const changedPackages = await getChangedPackages(\n    options.repoCwd,\n    options.includeAllProjects\n  );\n  const summary = !options.hideHeadline\n    ? core.summary.addHeading(\n        generateHeadline({\n          name: options.name,\n          relativeDir: '',\n        }),\n        2\n      )\n    : core.summary;\n\n  for (const packageItem of changedPackages) {\n    const projectCwd = packageItem.dir;\n    core.info(`generating coverage summary from: ${projectCwd}`);\n    const { jsonSummaryPath, jsonSummaryComparePath, jsonFinalPath } =\n      getVitestJsonPath(projectCwd);\n\n    if (!existsSync(jsonSummaryPath)) {\n      core.warning(`No summary report json file found, skip ${projectCwd}`);\n      continue;\n    }\n\n    const jsonSummary = await parseVitestJsonSummaryReport(jsonSummaryPath);\n    const thresholds = await getVitestThresholds(projectCwd);\n\n    let jsonSummaryCompare: JsonSummary | undefined;\n    if (jsonSummaryComparePath) {\n      jsonSummaryCompare = await parseVitestJsonSummaryReport(\n        jsonSummaryComparePath\n      );\n    }\n    // for single project, we don't need to show the project name\n    // single project `relativeDir===''`\n    if (packageItem.relativeDir) {\n      summary.addHeading(\n        generateHeadline({\n          name: options.name,\n          relativeDir: packageItem.relativeDir,\n        }),\n        2\n      );\n    }\n\n    const tableData = generateSummaryTableHtml(\n      jsonSummary.total,\n      thresholds,\n      jsonSummaryCompare?.total\n    );\n\n    summary.addRaw(tableData);\n\n    if (options.fileCoverageMode !== FileCoverageMode.None) {\n      const pullChanges = await getPullChanges(options.fileCoverageMode);\n      const jsonFinal = await parseVitestJsonFinalReport(jsonFinalPath);\n      const fileTable = generateFileCoverageHtml({\n        jsonSummary,\n        jsonFinal,\n        fileCoverageMode: options.fileCoverageMode,\n        pullChanges,\n      });\n      summary.addDetails('File Coverage', fileTable);\n    }\n  }\n  try {\n    summary.addRaw(\n      `<em>Generated in workflow <a href=${getWorkflowSummaryURL()}>#${github.context.runNumber}</a></em>`\n    );\n  } catch {\n    // ignore, when we use cli mode, we don't have github context\n  }\n  return summary;\n};\n\nfunction getWorkflowSummaryURL() {\n  const { owner, repo } = github.context.repo;\n  const { runId } = github.context;\n  return `${github.context.serverUrl}/${owner}/${repo}/actions/runs/${runId}`;\n}\n","import { toString } from 'mdast-util-to-string';\nimport remarkParse from 'remark-parse';\nimport remarkStringify from 'remark-stringify';\nimport { unified } from 'unified';\nimport { COVERAGE_README_MARKER } from '../constants.js';\n\nexport function updateReadmeEntry(readme: string, readmeUpdateBody: string) {\n  const ast = unified().use(remarkParse).parse(readme);\n  const updatedast = unified().use(remarkParse).parse(readmeUpdateBody);\n\n  const nodes = ast.children;\n  let headingStartInfo:\n    | {\n        index: number;\n      }\n    | undefined;\n  let endIndex: number | undefined;\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (node.type === 'html') {\n      const stringified: string = toString(node);\n      if (\n        headingStartInfo === undefined &&\n        stringified === COVERAGE_README_MARKER\n      ) {\n        headingStartInfo = {\n          index: i,\n        };\n        continue;\n      }\n      if (endIndex === undefined && headingStartInfo !== undefined) {\n        endIndex = i;\n        break;\n      }\n    }\n  }\n\n  if (headingStartInfo && endIndex) {\n    ast.children.splice(\n      headingStartInfo.index,\n      endIndex - headingStartInfo.index + 1,\n      ...updatedast.children\n    );\n  } else {\n    ast.children.splice(2, 0, ...updatedast.children);\n  }\n  return {\n    content: unified().use(remarkStringify).stringify(ast),\n  };\n}\n","import { existsSync } from 'node:fs';\nimport { readFile, writeFile } from 'node:fs/promises';\nimport { join } from 'node:path';\nimport * as core from '@actions/core';\nimport { COVERAGE_README_MARKER } from '../constants.js';\nimport { updateReadmeEntry } from './updateReadmeEntry.js';\n\n/**\n * Write the vitest coverage summary to the README\n * @param cwd - The current working directory\n * @param summary - The summary to write to the README\n * @param headline - The headline to use for the summary `## Coverage Report`\n */\nexport const writeSummaryToReadMe = async (\n  cwd: string,\n  summary: typeof core.summary,\n  headline: string\n) => {\n  const readmeUpdateBody = `${COVERAGE_README_MARKER}\\n\\n${headline}\\n\\n${summary.stringify()}`;\n  const readmeFile = join(cwd, 'README.md');\n  if (existsSync(readmeFile)) {\n    const readmeContents = await readFile(readmeFile, 'utf8');\n    const entry = updateReadmeEntry(readmeContents, readmeUpdateBody);\n    await writeFile(readmeFile, entry.content);\n  } else {\n    core.warning(`No README.md found in ${cwd}`);\n  }\n};\n","import minimist from 'minimist';\nimport { resolve } from 'path';\nimport { FileCoverageMode } from './inputs/getCoverageModeFrom.js';\nimport { getVitestJsonPath } from './inputs/getVitestJsonPath.js';\nimport { parseVitestJsonSummaryReport } from './inputs/parseVitestJsonFinalReport.js';\nimport { generateBadges } from './report/generateBadges.js';\nimport { generateCoverageSummary } from './report/generateCoverageSummary.js';\nimport { writeSummaryToReadMe } from './utils/writeSummaryToReadMe.js';\n\ntype Argv = {\n  p: string;\n  path: string;\n  type: Array<'badges' | 'readme'>;\n  projectCwd: string;\n};\n\nexport const main = async (args: string[]) => {\n  const argv = minimist<Argv>(args, {\n    '--': true,\n    alias: {\n      p: 'path',\n    },\n    default: {\n      p: 'coverage/badges',\n      type: ['badges'],\n      projectCwd: process.cwd(),\n    },\n  });\n  const cwd = argv.projectCwd || process.cwd();\n  const badgesSavedTo = resolve(cwd, argv.path);\n  const { jsonSummaryPath } = getVitestJsonPath(cwd);\n  const jsonSummary = await parseVitestJsonSummaryReport(jsonSummaryPath);\n  const types = Array.isArray(argv.type) ? argv.type : [argv.type];\n  for (const type of types) {\n    if (type === 'badges') {\n      await generateBadges({\n        badgesSavedTo,\n        totalCoverageReport: jsonSummary.total,\n      });\n    } else if (type === 'readme') {\n      const summary = await generateCoverageSummary({\n        name: '',\n        fileCoverageMode: FileCoverageMode.None,\n        repoCwd: cwd,\n        hideHeadline: true,\n        includeAllProjects: true,\n      });\n      await writeSummaryToReadMe(cwd, summary, '## Coverage Report');\n    }\n  }\n};\n"]}